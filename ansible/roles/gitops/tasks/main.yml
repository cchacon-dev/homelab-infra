---
# Role: gitops
# Purpose: Manage Flux authentication via GitHub App (Secret) and ensure GitRepository references it.
# Notes:
#   - This role talks to the cluster from the Ansible controller (localhost).
#   - Requires a valid kubeconfig file on the Ansible controller.
#   - All operations are idempotent; they will NOOP if already in the desired state.

# Expected variables (set in defaults/main.yml or group_vars):
#   gitops_namespace: "flux-system"
#   gitops_flux_gitrepo_name: "flux-system"
#   gitops_githubapp_secret_name: "homelab-ghapp"
#   gitops_kubeconfig: path to kubeconfig on controller (default picks $KUBECONFIG or ~/.kube/config)
#
# Expected secrets (put in Vault or group_vars):
#   github_app_id: "123456"
#   github_app_installation_id: "9876543"
#   github_app_private_key_pem: |-
#     -----BEGIN RSA PRIVATE KEY-----
#     ...
#     -----END RSA PRIVATE KEY-----
#
# Execution:
#   ansible-playbook ansible/playbooks/site.yml --tags gitops -l cp01-homelab
#
# Verification:
#   kubectl -n flux-system get secret homelab-ghapp -o json | jq -r '.data | keys'
#   kubectl -n flux-system get gitrepository flux-system -o yaml | yq '.spec.secretRef'

- name: Gitops | Assert kubeconfig is provided
  ansible.builtin.assert:
    that:
      - gitops_kubeconfig is defined
      - gitops_kubeconfig | length > 0
    fail_msg: >-
      'gitops_kubeconfig' is not defined or empty. Provide a valid kubeconfig path
      (e.g. set KUBECONFIG env var, or define gitops_kubeconfig in group_vars/defaults).
    success_msg: Kubeconfig variable present.

- name: Gitops | Check kubeconfig file exists on controller
  ansible.builtin.stat:
    path: "{{ gitops_kubeconfig }}"
  register: gitops_kubeconfig_stat
  delegate_to: localhost
  run_once: true

- name: Gitops | Fail early if kubeconfig is missing
  ansible.builtin.fail:
    msg: >-
      kubeconfig not found at '{{ gitops_kubeconfig }}'.
      Ensure the file exists on the Ansible controller and is readable.
  when: not gitops_kubeconfig_stat.stat.exists
  delegate_to: localhost
  run_once: true

- name: Gitops | Ensure namespace exists
  vars:
    ansible_python_interpreter: "{{ gitops_python_interpreter }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ gitops_kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ gitops_namespace }}"
  delegate_to: localhost
  run_once: true
  tags: ['gitops']

- name: Gitops | Ensure GitHub App Secret (camelCase keys)
  vars:
    ansible_python_interpreter: "{{ gitops_python_interpreter }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ gitops_kubeconfig }}"
    state: present
    definition: "{{ lookup('template', 'secret-githubapp.yaml.j2') | from_yaml }}"
  delegate_to: localhost
  run_once: true
  tags: ['gitops']

- name: Gitops | Patch GitRepository to reference Secret (spec.secretRef)
  vars:
    ansible_python_interpreter: "{{ gitops_python_interpreter }}"
  kubernetes.core.k8s_json_patch:
    kubeconfig: "{{ gitops_kubeconfig }}"
    api_version: source.toolkit.fluxcd.io/v1
    kind: GitRepository
    namespace: "{{ gitops_namespace }}"
    name: "{{ gitops_flux_gitrepo_name }}"
    patch:
      - op: add
        path: /spec/secretRef
        value: { "name": "{{ gitops_githubapp_secret_name }}" }
  failed_when: false
  delegate_to: localhost
  run_once: true
  tags: ['gitops']

- name: Gitops | Request GitRepository reconciliation (poke)
  vars:
    ansible_python_interpreter: "{{ gitops_python_interpreter }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ gitops_kubeconfig }}"
    state: patched
    definition:
      apiVersion: source.toolkit.fluxcd.io/v1
      kind: GitRepository
      metadata:
        name: "{{ gitops_flux_gitrepo_name }}"
        namespace: "{{ gitops_namespace }}"
        annotations:
          reconcile.fluxcd.io/requestedAt: "{{ ansible_date_time.iso8601 }}"
      spec: {}
  delegate_to: localhost
  run_once: true
  tags: ['gitops']

- name: Gitops | Read back GitRepository secretRef (verify)
  vars:
    ansible_python_interpreter: "{{ gitops_python_interpreter }}"
  kubernetes.core.k8s_info:
    kubeconfig: "{{ gitops_kubeconfig }}"
    api_version: source.toolkit.fluxcd.io/v1
    kind: GitRepository
    namespace: "{{ gitops_namespace }}"
    name: "{{ gitops_flux_gitrepo_name }}"
  register: gitops_gitrepo_info
  delegate_to: localhost
  run_once: true
  tags: ['gitops']

# Optional verification block (read-only) to aid debugging and CI logs
- name: Gitops | Read back GitRepository secretRef (verify)
  kubernetes.core.k8s_info:
    kubeconfig: "{{ gitops_kubeconfig }}"
    api_version: source.toolkit.fluxcd.io/v1
    kind: GitRepository
    namespace: "{{ gitops_namespace }}"
    name: "{{ gitops_flux_gitrepo_name }}"
  register: gitops_gitrepo_info
  delegate_to: localhost
  run_once: true
  tags: ['gitops']

- name: Gitops | Debug secretRef and URL (verify)
  ansible.builtin.debug:
    msg:
      name: "{{ gitops_gitrepo_info.resources[0].metadata.name | default(gitops_flux_gitrepo_name) }}"
      secretRef: "{{ gitops_gitrepo_info.resources[0].spec.secretRef | default({}) }}"
      url: "{{ gitops_gitrepo_info.resources[0].spec.url | default('n/a') }}"
  when: gitops_gitrepo_info.resources | length > 0
  delegate_to: localhost
  run_once: true
  tags: ['gitops']
